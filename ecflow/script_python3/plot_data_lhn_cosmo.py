import argparse, sys, csv
import numpy as np, pandas as pd, datetime as dt
import matplotlib, matplotlib.pyplot as plt, matplotlib.dates as mdates


# -------------------------------------------------------------------------------------
# DESCRIPTION - 19/08/2022
# -------------------------------------------------------------------------------------
# The script reads the CSV file generated by "read_data_lhn.py" and generates 3 plots:
#   - LHN_last24h.png: plot percentage of SRI fields assimilated via LHN, the domain-
#       average and maximum SRI in each assimilation cycle of the last 24 hours;
#   - LHN_last30d.png: lot percentage of SRI fields assimilated via LHN, the domain-
#       average estimated daily precipitation and maximum SRI in each day of the last
#       30 days (cumulating data  of each assimilation cycles over each day);
#   - LHN_last365d.png:  same as 'LHN_last30d.png' but for the last 365 days.


# -------------------------------------------------------------------------------------
# VARIABLES AND FUNCTIONS
# -------------------------------------------------------------------------------------
# Input file name, generated by "read_data_lhn.py"
fname_lhn = "diagnostic_LHN.csv"

# Plot general fontsize and resolution
bar_color = [31/255,120/255,180/255]
size      = 24
font      = {'size': size}
dpi       = 120
plt.rc('font', **font)

# Format of dates in x-axis for 24 hours, 30 days and 365 days plots
fmt_24h  = mdates.DateFormatter("%d %b %H:%M")
fmt_30d  = mdates.DateFormatter("%d %b %Y")
fmt_365d = mdates.DateFormatter("%d %b %Y")

# Command line input
def command_line():
    parser = argparse.ArgumentParser(description = 'LHN DIAGNOSTIC - PLOT DATA.       \
                        The script read diagnostic file generated by read_data_lhn.py \
                        and plot contained data of the last 24 hours, 30 days and 365 \
                        days.')
    parser.add_argument('--folder', default = ".",   type = str,
                        help = 'Folder in which file generated by read_data_lhn.py   \
                                (diagnostic_LHN.csv) is stored (defalut: current     \
                                directory)')
    parser.add_argument('--lencyc', default = 3,     type = int,
                        help = 'Length of assimilation cycles in hours')
    parser.add_argument('--last_date', default = "", type = str,
                        help = 'Last date to be plotted in the format YYYYMMDDHH')
    return parser.parse_args()


# Read data from csv file. Parameters: 
#   - fname      = file name
#   - option     = 'data_lhn': to read "diagnostic_LHN.csv"
def read_from_csv(fname, option):
    # Read the file as a dictionary for each column {header: value)
    # to be decomposed, after, into arrays
    with open(fname, 'r') as csvfile:
        # Read the file as a dictionary for each column {header: value)
        # to be decomposed, after, into arrays
        reader = csv.DictReader(csvfile)
        data = {}
        for row in reader:
            for header, value in row.items():
                try:
                    data[header].append(value)
                except KeyError:
                    data[header] = [value]

    # Store date and time in a list of datetime objects and other data according 
    # to 'option' (maintained, although there is only one option, for uniformity with 
    # other scripts)
    date     = np.array(data['Date'])
    time     = np.array(data['Time'])
    datetime = np.array([dt.datetime.strptime("%s %s" %(date[i], time[i]),
                        '%Y%m%d %H%M') for i in range(len(date))])
    if option == 'data_lhn':
        perc    = np.array(data['Percentage of available obs.'], dtype=int)
        average = np.array(data['Average'],                      dtype=float)
        minimum = np.array(data['Minimum'],                      dtype=float)
        maximum = np.array(data['Maximum'],                      dtype=float)

        return datetime, perc, average, minimum, maximum


# Select last 365 days and 30 days of data, computing daily quantities. Parameters:
#   - inp_dt  = list of datetime aoociated to 'inp_arr' (generally read from
#               the csv file)
#   - inp_arr = array containing data 
#   - option  = 'lhn_perc': compute daily percentage of SRI fields
#               'lhn_ave' : compute daily domain-average of SRI fileds (sum of each
#                           fieldi, that is estimated daily precipitation)
#               'lhn_min' : compute daily minimum of SRI fields
#               'lhn_max' : compute daily maximum of SRI fields
def select_daydata(inp_dt, inp_arr, option):
    # Initialize variables
    dt_ana = dt_365dbf
    j, k   = 0, 0
    out_arr_30d  = np.zeros(diff_30d)
    out_arr_365d = np.zeros(diff_365d)

    # Loop over days
    while dt_ana <= dt_prev_day:
        # Select data for the specified date
        day_data = inp_arr[(inp_dt >= dt_ana) & (inp_dt <= dt_ana+delta_day_lencyc)]

        # Compute and save daily quantities for 365 days plot
        if len(day_data) > 0:
            if   option == 'lhn_perc':
                out_arr_365d[j] = np.sum(day_data) / len(day_data)
            elif option == 'lhn_ave':
                out_arr_365d[j] = np.sum(day_data)
            elif option == 'lhn_min':
                out_arr_365d[j] = np.amin(day_data)
            elif option == 'lhn_max':
                out_arr_365d[j] = np.amax(day_data)

            # Compute and save daily quantities for 30 days plot
            if dt_ana >= dt_30dbf:        
                if   option == 'lhn_perc':
                    out_arr_30d[k] = np.sum(day_data) / len(day_data)
                elif option == 'lhn_ave':
                    out_arr_30d[k] = np.sum(day_data)
                elif option == 'lhn_min':
                    out_arr_30d[k] = np.amin(day_data)
                elif option == 'lhn_max':
                    out_arr_30d[k] = np.amax(day_data)
        
                # Update array index 
                k += 1

        # Update dt_ana
        j      += 1
        dt_ana += dt.timedelta(days=1)

    return out_arr_30d, out_arr_365d


# Axis labels and ticks for subplots. Parameters:
#   - ax           = axis to which apply modifications
#   - xmin, xmax   = limits for x-axis (a small white space before xmin and after xmax
#                    is added, dependeng on the width of the interval)
#   - ymin, ymax   = limits for y-axis
#   - title        = title of the subplot (None = no title)
#   - xlabel       = label of x-axis      (None = no title)
#   - ylabel       = label of y-axis      (None = no title)
#   - xaxis_values = if True, x-axis ticks are added
#   - xfreq        = frequency of x-axis ticks
#   - xfmt         = format    of x-axis ticks
def axis_labels_ticks(ax, xmin, xmax, ymin, ymax, title=None, xlabel=None,
                      ylabel=None, xaxis_values=False, xfreq=None, xfmt=None):
    # Title
    if title is not None: ax.set_title(title, fontsize=size+3)

    # Label for y-axis
    if ylabel is not None: ax.set_ylabel(ylabel, fontsize=size)

    # Label for x-axis
    if xlabel is not None: ax.set_xlabel(xlabel, fontsize=size)

    # Define extra white space before xmin and after xmax
    if   (xmax-xmin).days <= 3:
        extra_sp = dt.timedelta(hours=lencyc/2)
    elif (xmax-xmin).days > 3 and (xmax-xmin).days <= 33:
        extra_sp = dt.timedelta(hours=12)
    else:
        extra_sp = dt.timedelta(hours=24)

    # Format x-axis (remove ticks if xaxis_values = False)
    if xaxis_values:
        plt.setp(ax.xaxis.get_majorticklabels(), rotation=90, fontsize=size-5)
        ax.set_xticks(pd.date_range(xmin, xmax, freq=xfreq))
        ax.xaxis.set_major_formatter(xfmt)
    else:
        ax.tick_params(axis='x', which='both', bottom=False, top=False,
                      labelbottom=False)
    ax.set_xlim(xmin-extra_sp, xmax+extra_sp)

    # Format y-axis
    plt.setp(ax.yaxis.get_majorticklabels(), fontsize=size-2)
    ax.set_ylim(ymin, ymax)
    if ymax >= 10000:
        ax.ticklabel_format(axis='y', style='sci', scilimits=(0,0), useLocale=True)
        ax.yaxis.get_offset_text().set_fontsize(size-2)

    return ax


# Plot superior title and save figure. Parameters:
#   - figure   = figure object
#   - prefix   = string to put at the beginning of the title
#   - interval = time interval of data ('24 hours', '30 days', '365 days')
#   - fdate    = first date of the interval
#   - ldate    = last  date of the interval
def plot_title_and_save(figure, prefix, interval, fdate, ldate, outname):
    # Plot title
    if interval == '24 hours':
        st = figure.suptitle('%s in the last %s (from %s to %s)' %(prefix, interval,
                             fdate.strftime("%d/%m/%y at %H UTC"),
                             ldate.strftime("%d/%m/%y at %H UTC")), fontsize=size+6)
    else:
        st = figure.suptitle('%s in the last %s (from %s to %s)' %(prefix, interval,
                             fdate.strftime("%d/%m/%y"), ldate.strftime("%d/%m/%y")),
                             fontsize=size+6)
    # Set position
    st.set_y(0.96)

    # Save plot and close
    figure.savefig(outname, bbox_inches='tight')
    plt.close(figure)

    return None


# -------------------------------------------------------------------------------------
# INITIALIZE SOME VARIABLES
# -------------------------------------------------------------------------------------
# Read variables from commad line
args = command_line()
folder, lencyc, last_date = args.folder, args.lencyc, args.last_date

# Define header for the csv file
header = ['Date', 'Time', 'Percentage of available obs.', 'Average', 'Minimum',
          'Maximum']

# Time interval for  24h plot 
dt_last     = dt.datetime.strptime(last_date, '%Y%m%d%H')
dt_24hbf    = dt_last - dt.timedelta(hours=24-lencyc)

# Time interval for  30d plot (consider the penultimate day to have a complete day of
# KENDA cycles)
dt_prev_day = dt.datetime(dt_last.year, dt_last.month, dt_last.day, 0)
dt_30dbf    = dt_prev_day - dt.timedelta(days=30) + dt.timedelta(hours=lencyc)

# Time interval for 365d plot (consider the penultimate day as for 30d plots)
dt_365dbf   = dt_prev_day - dt.timedelta(days=365) + dt.timedelta(hours=lencyc)

# Retrieve datetime variables necessary for all 30d and 365d plots
diff_365d        = (dt_prev_day - dt_365dbf).days + 1
diff_30d         = (dt_prev_day -  dt_30dbf).days + 1
lst30d_dt        = pd.date_range(dt_30dbf,  dt_prev_day, freq='1d')
lst365d_dt       = pd.date_range(dt_365dbf, dt_prev_day, freq='1d')
delta_day_lencyc = dt.timedelta(hours=24-lencyc)


# -------------------------------------------------------------------------------------
# PLOT DATA FOR LHN FOR LAST 24 HOURS, 30 DAYS AND 365 DAYS 
# -------------------------------------------------------------------------------------
# Initialize plots
print("\n------------------------------------------------------------")
print("PLOT LHN DATA")
print("------------------------------------------------------------")
fig_24h,  ax_24h  = plt.subplots(nrows=1, ncols=3, figsize=(30, 9), dpi=dpi)
fig_30d,  ax_30d  = plt.subplots(nrows=1, ncols=3, figsize=(30, 9), dpi=dpi)
fig_365d, ax_365d = plt.subplots(nrows=1, ncols=3, figsize=(30, 9), dpi=dpi)
fig_24h.subplots_adjust(wspace=0.25,  top=0.82)
fig_30d.subplots_adjust(wspace=0.25,  top=0.82)
fig_365d.subplots_adjust(wspace=0.25, top=0.82)

# Import all data stored in csv file
datetime, perc, average, minimum, maximum = read_from_csv(fname_lhn, 'data_lhn')

# Select last 24 hours of data
lst24h_dt   = datetime[(datetime >= dt_24hbf) & (datetime <= dt_last)]
lst24h_perc = perc[(datetime     >= dt_24hbf) & (datetime <= dt_last)]
lst24h_ave  = average[(datetime  >= dt_24hbf) & (datetime <= dt_last)]
lst24h_min  = minimum[(datetime  >= dt_24hbf) & (datetime <= dt_last)]
lst24h_max  = maximum[(datetime  >= dt_24hbf) & (datetime <= dt_last)]

# Select last 365 days and 30 days of data, condensing information on a daily basis
lst30d_perc, lst365d_perc = select_daydata(datetime, perc,    'lhn_perc')
lst30d_ave,  lst365d_ave  = select_daydata(datetime, average, 'lhn_ave')
lst30d_min,  lst365d_min  = select_daydata(datetime, minimum, 'lhn_min')
lst30d_max,  lst365d_max  = select_daydata(datetime, maximum, 'lhn_max')


# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# PLOT DATA FOR LAST 24 HOURS
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Create bar plot
print("- Plot last 24 hours of data, from %s to %s" %(dt_24hbf, dt_last))
ax_24h[0].bar(lst24h_dt, lst24h_perc, 0.025*lencyc, color=bar_color)
ax_24h[1].bar(lst24h_dt, lst24h_ave,  0.025*lencyc, color=bar_color)
ax_24h[2].bar(lst24h_dt, lst24h_max,  0.025*lencyc, color=bar_color)

# Set title, labels and ticks
axis_labels_ticks(ax_24h[0], dt_24hbf, dt_last, 0, 105, title="Available SRI fields",
                  ylabel='Percentage [%]', xlabel='Date and Time', xaxis_values=True, 
                  xfreq='%sh' %lencyc, xfmt=fmt_24h)
axis_labels_ticks(ax_24h[1], dt_24hbf, dt_last, 0, 1.1*np.amax(lst24h_ave), 
                  title="Average SRI", xlabel='Date and Time', 
                  ylabel='Precipitation intensity [mm/h]', 
                  xaxis_values=True,  xfreq='%sh' %lencyc, xfmt=fmt_24h)
axis_labels_ticks(ax_24h[2], dt_24hbf, dt_last, 0, 1.1*np.amax(lst24h_max), 
                  title="Maximum SRI", xlabel='Date and Time',
                  ylabel='Precipitation intensity [mm/h]', 
                  xaxis_values=True,  xfreq='%sh' %lencyc, xfmt=fmt_24h)

# Plot title and save
plot_title_and_save(fig_24h, "SRI fields assimilated via LHN", '24 hours', dt_24hbf, 
                    dt_last, 'LHN_last24h.png')


# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# PLOT DATA FOR LAST 30 DAYS
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Create bar plot
print("- Plot last 30 days  of data, from %s to %s"  %(dt_30dbf, dt_prev_day))
ax_30d[0].bar(lst30d_dt, lst30d_perc, width=1.0, color=bar_color)
ax_30d[1].bar(lst30d_dt, lst30d_ave,  width=1.0, color=bar_color)
ax_30d[2].bar(lst30d_dt, lst30d_max,  width=1.0, color=bar_color)

# Set title, labels and ticks
axis_labels_ticks(ax_30d[0], dt_30dbf, dt_prev_day, 0, 105, 
                  title="Available SRI fields", ylabel='Percentage [%]', 
                  xlabel='Date and Time', xaxis_values=True, xfreq='3d', xfmt=fmt_30d)
axis_labels_ticks(ax_30d[1], dt_30dbf, dt_prev_day, 0, 1.1*np.amax(lst30d_ave),
                  title="Average daily precipitation", 
                  ylabel='Accumulated precipitation [mm]',
                  xlabel='Date and Time', xaxis_values=True,  xfreq='3d', xfmt=fmt_30d)
axis_labels_ticks(ax_30d[2], dt_30dbf, dt_prev_day, 0, 1.1*np.amax(lst30d_max),
                  title="Maximum SRI", ylabel='Precipitation intensity [mm/h]',
                  xlabel='Date and Time', xaxis_values=True,  xfreq='3d', xfmt=fmt_30d)

# Plot title and save
plot_title_and_save(fig_30d, "SRI fields assimilated via LHN", '30 days', dt_30dbf, 
                    dt_last, 'LHN_last30d.png')


# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# PLOT DATA FOR LAST 365 DAYS
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Create bar plot
print("- Plot last 365 days of data, from %s to %s"  %(dt_30dbf, dt_prev_day))
ax_365d[0].bar(lst365d_dt, lst365d_perc, width=1.0, color=bar_color)
ax_365d[1].bar(lst365d_dt, lst365d_ave,  width=1.0, color=bar_color)
ax_365d[2].bar(lst365d_dt, lst365d_max,  width=1.0, color=bar_color)

# Set title, labels and ticks
axis_labels_ticks(ax_365d[0], dt_365dbf, dt_prev_day, 0, 105, 
                  title="Available SRI fields", ylabel='Percentage [%]', 
                  xlabel='Date and Time', xaxis_values=True, xfreq='30d', xfmt=fmt_365d)
axis_labels_ticks(ax_365d[1], dt_365dbf, dt_prev_day, 0, 1.1*np.amax(lst365d_ave),
                  title="Average daily precipitation", xfreq='30d', xfmt=fmt_365d,
                  ylabel='Accumulated precipitation [mm]',
                  xlabel='Date and Time', xaxis_values=True)
axis_labels_ticks(ax_365d[2], dt_365dbf, dt_prev_day, 0, 1.1*np.amax(lst365d_max),
                  title="Maximum SRI", ylabel='Precipitation intensity [mm/h]',
                  xlabel='Date and Time', xaxis_values=True,  xfreq='30d',  
                  xfmt=fmt_365d)

# Plot title and save
plot_title_and_save(fig_365d, "SRI fields assimilated via LHN", '365 days', dt_365dbf,
                     dt_last, 'LHN_last365d.png')

