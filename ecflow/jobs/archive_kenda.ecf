%include <sched_wait.h>
%include <%HPCENV%/smnd.h>
%include <head.h>

# module load singularity || true
# source other optional modules
. $NWPCONFBINDIR/nwptime.sh
if [[ "%SUITE%" == "icon"* ]]; then
    . $NWPCONFBINDIR/icon_model.sh
else    
    . $NWPCONFBINDIR/cosmo_model.sh
fi
. $NWPCONFBINDIR/putarki.sh
. $NWPCONFBINDIR/arkilocal.sh
. $NWPCONFBINDIR/arki_tools.sh
. $NWPCONFBINDIR/lami_postproc.sh
# end of setup


archive_putarki() {
    if [ -f "$detfile" ]; then
# change signal here
	MODEL_SIGNAL=${MODEL_SIGNAL}_kenda
	dirname=$MODEL_SIGNAL
	putarki_configured_setup $dirname "reftime=$DATE$TIME" "format=grib" "signal=$MODEL_SIGNAL"
	putarki_configured_archive $dirname $detfile grib
	for ppc in ${POSTPROC_LIST[*]}; do
	    ext=${ppc##*_}
	    $ppc $detfile ${detfile}_${ext}
	    [ -s "${detfile}_${ext}" ] && putarki_configured_archive $dirname ${detfile}_${ext} $POSTPROC_FORMAT
	    rm -f ${detfile}_${ext}
	done
	putarki_configured_end $dirname
    fi
}


archive_suite() {
    if [ -n "$MODEL_ARCHIVE_OUTPUT_ANA" ]; then
	# ICON model
	if [[ "%SUITE%" == "icon"* ]]; then
            if [ "$TIME" = "21" ]; then # all members for fcens
                # local copy
                mkdir -p $MODEL_ARCHIVE_OUTPUT_ANA/${DATE}${TIME}
                rsync -pt $LETKF_DATADIR/laf${DATE}${TIME}0000_inc.??? \
			  $MODEL_ARCHIVE_OUTPUT_ANA/${DATE}${TIME}
                if [ -n "$MODEL_ARCHIVE_OUTPUT_ANA_REMOTE" ]; then
                    rsync -pt $LETKF_DATADIR/laf${DATE}${TIME}0000_inc.??? 	
		 	      $MODEL_ARCHIVE_OUTPUT_ANA_REMOTE || true
                fi
            else # same as above but only deterministic
                mkdir -p $MODEL_ARCHIVE_OUTPUT_ANA/${DATE}${TIME}
                rsync -pt $detfile_inc $MODEL_ARCHIVE_OUTPUT_ANA/${DATE}${TIME}
                if [ -n "$MODEL_ARCHIVE_OUTPUT_ANA_REMOTE" ]; then
                    rsync -pt $detfile_inc $MODEL_ARCHIVE_OUTPUT_ANA_REMOTE || true
                fi
            fi
            if [ "$TIME" = "00" ]; then # clean data at least one month old
                for mm in 2 3 4; do
                    MM=`date --date="${DATE} $mm month ago" +%%Y%%m`
                    rm -f $MODEL_ARCHIVE_OUTPUT_ANA/${DATE}${TIME}/laf${MM}????0000_inc.???
                done
            fi

	# COSMO model
	else
    	    if [ "$TIME" = "21" ]; then # all members for fcens
    	        # local copy
    	   	mkdir -p $MODEL_ARCHIVE_OUTPUT_ANA
    	   	rsync -pt $LETKF_DATADIR/laf${DATE}${TIME}0000.??? $MODEL_ARCHIVE_OUTPUT_ANA
    	   	# remote copy if required
    	   	if [ -n "$MODEL_ARCHIVE_OUTPUT_ANA_REMOTE" ]; then
    	   	    rsync -pt $LETKF_DATADIR/laf${DATE}${TIME}0000.??? $MODEL_ARCHIVE_OUTPUT_ANA_REMOTE || true
    	   	fi
    	    else # same as above but only deterministic
    	       	mkdir -p $MODEL_ARCHIVE_OUTPUT_ANA
    	       	rsync -pt $detfile $MODEL_ARCHIVE_OUTPUT_ANA
    	       	if [ -n "$MODEL_ARCHIVE_OUTPUT_ANA_REMOTE" ]; then
    	    	    rsync -pt $detfile $MODEL_ARCHIVE_OUTPUT_ANA_REMOTE || true
    	   	fi
    	    fi
    	    if [ "$TIME" = "00" ]; then # clean data at least one month old
    	       	for mm in 2 3 4; do
    	    	    MM=`date --date="${DATE} $mm month ago" +%%Y%%m`
    	   	    rm -f $MODEL_ARCHIVE_OUTPUT_ANA/laf${MM}????0000.???
    	       	done
    	    fi
	fi
    fi
}


archive_perm() {
    if [ -n "$CINECA_ARCHIVE_POST" ]; then
	# Create archive folder and save deterministic analysis
        subdir=%SUITE%/$DATE$TIME
	mkdir -p $CINECA_ARCHIVE_POST/$subdir
	rsync -pt $detfile $CINECA_ARCHIVE_POST/$subdir

	if [[ "%SUITE%" == "icon_2I_enda"* ]]; then
	    # Retrieve first guess lead time
	    model_stop_min=$((MODEL_STOP * 60))
	    dt_shift_min=$((DT_IAU / 120))
	    lead_time_min=$((model_stop_min - dt_shift_min))
	    lt_hh=$((lead_time_min /  60 ))
	    lt_mm=$((lead_time_min %% 60 ))

	    # Save deterministic first guess
	    fgfile=$MODEL_DATADIR/icon_${DATES}${TIMES}00_+000${lt_hh}${lt_mm}00.grb
            rsync -pt $fgfile $CINECA_ARCHIVE_POST/$subdir/icon_${DATES}${TIMES}00_+000${lt_hh}${lt_mm}00_000.grb

	    # Save ensemble first guess
            if [ "$TIME" = "21" ]; then
		for n in `seq 1 $ENS_TOTAL_MEMB`; do
		    n3=`printf "%%03d" $n`	
		    fgfile=${MODEL_DATADIR}.$n/icon_${DATES}${TIMES}00_+000${lt_hh}${lt_mm}00.grb	
	    	    rsync -pt $fgfile $CINECA_ARCHIVE_POST/$subdir/icon_${DATES}${TIMES}00_+000${lt_hh}${lt_mm}00_${n3}.grb
		done
	    fi
	fi

	# Save ensemble analysis at 21 UTC
        if [ "$TIME" = "21" ]; then
            rsync -pt $LETKF_DATADIR/laf${DATE}${TIME}0000.??? $CINECA_ARCHIVE_POST/$subdir
	fi
    fi
}


archive_arki() {
    # override conf.sh if required
    if [ -n "$2" ]; then
	ARKI_DIR=$2
    fi
    if [ -f "$1" ]; then
        arkilocal_setup
        arkilocal_create
        time putarki_archive grib $1
        if [ "$TIME" = "00" ]; then
            arki_dailycleanup $ARKI_CONF 6 12
        fi
	arkilocal_drop_from_cache
    fi
}


set -x
export detfile=$LETKF_DATADIR/laf${DATE}${TIME}0000.det
export detfile_inc=$LETKF_DATADIR/laf${DATE}${TIME}0000_inc.det

# archive on import/sync/download tree (+postproc)
archive_putarki &

# archive on suite tree (local and remote) for other suites
archive_suite &

# archive permanently locally under the arkimet dir
archive_perm &

# archive locally, for next suite cycle, including daily cleaning
archive_arki $detfile &
if [[ "%SUITE%" == "icon"* ]]; then
    archive_arki $detfile_inc &
fi
# put a barrier here to avoid challenging Zeus
wait
# members in parallel
for n in `seq 1 $ENS_TOTAL_MEMB`; do
    n3=`printf "%%03d" $n`
    archive_arki $LETKF_DATADIR/laf${DATE}${TIME}0000.$n3 $WORKDIR/arki.$n
    if [[ "%SUITE%" == "icon"* ]]; then
        archive_arki $LETKF_DATADIR/laf${DATE}${TIME}0000_inc.$n3 $WORKDIR/arki.$n
    fi
done
wait

# Save ekf files for diagnostics
FS_DATE=$WORKDIR/archive/${DATE}${TIME}
mkdir -p $WORKDIR/archive
mkdir -p $FS_DATE
cp $LETKF_WORKDIR/ekf* $FS_DATE || true
