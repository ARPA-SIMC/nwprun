%include <sched_mpi_enda.h>
%include <%HPCENV%/modules.h>
%include <head.h>

# source other optional modules
. $NWPCONFBINDIR/nwptime.sh
. $NWPCONFBINDIR/icon_model.sh
. $NWPCONFBINDIR/parcomp.sh
# end of setup

set -x

# Remove and create directory for MEC
safe_rm_rf $MEC_WORKDIR
mkdir -p $MEC_WORKDIR
cd $MEC_WORKDIR

# Create folders necessary for MEC
mkdir const input output run tmp

# Link observations
echo "Link observations"
for f in `ls $BUFR_WORKDIR/cdfin*.nc`; do
    ln -fs $f ${MEC_WORKDIR}/input
done

# evaluate availability of deterministic first guess
if [ -s "$WORKDIR/icon/data/icon_${DATES}${TIMES}00_+000${MODEL_STOP}0000.grb" ]; then
    da=Y
fi

# evaluate availability of ensemble member first guess
set -a ma
lma=
for n in `seq 1 $ENS_TOTAL_MEMB`; do
    if [ -s "$WORKDIR/icon.$n/data/icon_${DATES}${TIMES}00_+000${MODEL_STOP}0000.grb" ]; then
        # First guess exists
        ma[$n]=Y
        lma=$n
    else
        ma[$n]=N
    fi
done

# no analyses available at all, we are in canvas breeches (Bassini), abort
if [ "$da" != Y -a -z "$lma" ]; then
    exit 1
fi

# Link forecast files
echo "Link model output files"
for hh in `seq 0 1 $MODEL_STOP`; do
    # Retrieve lead time in hours and days
    nodays=$(printf "%%02d" $(( ${hh} / 24 )))
    nohours=$(printf "%%02d" $(( ${hh} %% 24 )))

    # Link deterministic
    filename=icon_${DATES}${TIMES}00_+${nodays}${nohours}0000.grb
    if [ "$da" = Y ]; then
      	ln -fs $WORKDIR/icon/data/$filename ${MEC_WORKDIR}/input
#        ln -fs $$WORKDIR/icon/data/$filename $LETKF_WORKDIR/input/lfff${DATE}${TIME}0000
    else
	ln -fs $WORKDIR/icon.$lma/data/$filename ${MEC_WORKDIR}/input
#        ln -fs $WORKDIR/icon.$lma/data/$filename $LETKF_WORKDIR/input/lfff${DATE}${TIME}0000
    fi

    # Link ensemble members
    if [[ $ENS_TOTAL_MEMB -gt 0 ]]; then 
        for mem in `seq 1 $ENS_TOTAL_MEMB`; do
            mem3=`printf "%%03d" $mem`
	    if [ "${ma[$n]}" = Y ]; then
            	ln -fs $WORKDIR/icon.${mem}/data/$filename    \
                       ${MEC_WORKDIR}/input/${filename}.${mem3}
#                ln -fs $WORKDIR/icon.${mem}/data/$filename    \
#			$LETKF_WORKDIR/input/lfff${DATE}${TIME}0000.$n3
	    elif [ -n "$lma" ]; then # use another member
		ln -fs $WORKDIR/icon.${lma}/data/$filename    \
                       ${MEC_WORKDIR}/input/${filename}.${mem3}
#                ln -fs $WORKDIR/icon.${lma}/data/$filename    \
#                       $LETKF_WORKDIR/input/lfff${DATE}${TIME}0000.$n3
	    else
        	ln -fs $WORKDIR/icon/data/$filename   	      \
                       ${MEC_WORKDIR}/input/${filename}.${mem3}
#                ln -fs $WORKDIR/icon/data/$filename           \
#                       $LETKF_WORKDIR/input/lfff${DATE}${TIME}0000.$n3
	    fi
        done
    fi
done

# Link constant file for ICON and reference atmosphere ("fg_file" in the namellist). It must
# be the last forecast file, that is the last file linked ("filename")
echo "Link constant fields and reference atmosphere"
if [ "$da" = Y ]; then
    ln -fs $WORKDIR/icon/data/icon_${DATES}${TIMES}00_const.grb ${MEC_WORKDIR}/const
    ln -s  $WORKDIR/icon/data/$filename ${MEC_WORKDIR}/input/fg_file
else
    ln -fs $WORKDIR/icon.${lma}/data/icon_${DATES}${TIMES}00_const.grb ${MEC_WORKDIR}/const
    ln -s  $WORKDIR/icon.${lma}/data/$filename ${MEC_WORKDIR}/input/fg_file
fi

# Link constant file for KENDA
echo "Link constant fields for KENDA"
ln -s ${LETKF_CONST}/ww15mgh.grd ${MEC_WORKDIR}/const/

# Link ICON grid
echo "Link ICON grid"
ln -s ${LOCALGRID} ${MEC_WORKDIR}/const/

# Create blacklist
touch ${MEC_WORKDIR}/input/blklsttmp

# Create namelist (VSTART necessary only for verification in fcast suite)
export VSTART=-$(( MODEL_STOP * 60 ))      
conf_template namelist_mec
mv namelist_mec run/namelist
chmod 755 run/namelist

# Run MEC
cd $MEC_WORKDIR/run
parcomp_mpirun $EXTRA_MPIRUN $MEC_BIN

# Save YUSTATS files for diagnostics
if [ "%SUITE%" == "icon_2I_enda"* ]; then
    FS_DATE=$WORKDIR/archive/${DATE}${TIME}
    rsync -pt $MEC_WORKDIR/run/YUSTATS  $FS_DATE/MEC_YUSTATS || true
fi
