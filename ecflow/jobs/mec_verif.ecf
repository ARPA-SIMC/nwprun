%include <sched_mpi_mec.h>
%include <%HPCENV%/modules.h>
%include <head.h>

# source other optional modules
. $NWPCONFBINDIR/nwptime.sh
. $NWPCONFBINDIR/icon_model.sh
. $NWPCONFBINDIR/parcomp.sh
# end of setup

set -x

# Remove and create directory for MEC
safe_rm_rf $MEC_WORKDIR
mkdir -p $MEC_WORKDIR
cd $MEC_WORKDIR

# Create folders necessary for MEC
mkdir const input output run tmp

# Link observations
echo "Link observations"
for f in `ls $BUFR_WORKDIR/cdfin*.nc`; do
    ln -fs $f ${MEC_WORKDIR}/input
done

# Link forecast files (whole forecast)
echo "Link model output files"
if [ $MODEL_STOP -gt 0 ]; then
    for hh in `seq 0 1 $MODEL_STOP`; do
        # Retrieve lead time in hours and days
        nodays=$(printf "%%02d" $(( ${hh} / 24 )))
        nohours=$(printf "%%02d" $(( ${hh} %% 24 )))
    
        # Link deterministic
        if [[ $ENS_TOTAL_MEMB -eq 0 ]]; then 
            filename=${MODEL_NAME}_${DATES}${TIMES}00_+${nodays}${nohours}0000.grb
            ln -fs $MODEL_DATADIR/$filename ${MEC_WORKDIR}/input
    
        # Link ensemble members (da rivedere)
        else
            for mem in `seq 1 $ENS_TOTAL_MEMB`; do
                mem3=`printf "%%03d" $mem`
                ln -fs ${MODEL_DATADIR}.${mem}/$filename    \
                       ${MEC_WORKDIR}/input/${filename}.${mem3}
            done
        fi
    done

# Link forecast files (same validity time)
else
    # Initialize arrays
    INI_DATE_LIST=()
    LEAD_TIME_LIST=()

    # Loop back in time
    for hh_back in `seq 0 $FC_LENGTH`; do
        # Retrieve forecast initialization date and time 
        ini_date=`date_sub $DATES $TIMES $hh_back hours`
        ini_time=`time_sub $DATES $TIMES $hh_back hours`

        # Check if "ini_time" is one of the initialization times that we want
        # to retrieve. If not, skip to next cycle
        match_found=0
        for valid_time in "${INI_TIMES[@]}"; do
            if [[ "$ini_time" == "$valid_time" ]]; then
                match_found=1
                break
            fi
        done
        if [ $match_found == 0 ]; then
            echo "Not a valid initialization time. Skipping."
            hh_back=$((hh_back + 1))
            continue
        fi

        # Retrieve model filenames for this initialization date and time
        for hh in `seq 0 $MODEL_OUT_FREQ $VER_FREQ`; do
            # Skip negative values of hh_back-hh
            if [ $((hh_back - hh )) -lt 0 ]; then
                break
            fi

            # Retrieve lead time in hours and days and filename
            nodays=$(printf "%%02d" $(( $((hh_back - hh)) / 24 )))
            nohours=$(printf "%%02d" $(( $((hh_back - hh)) %% 24 )))
            mod_filename=${MODEL_NAME}_${ini_date}${ini_time}00_+${nodays}${nohours}0000.grb

            # Check if this forecast file exists
            if [[ -s $MODEL_DATADIR/$mod_filename ]]; then
                echo "   Retrieved forecast $ini_date $initime for lead time +${hh_back}h"
                ln -fs $MODEL_DATADIR/$mod_filename ${MEC_WORKDIR}/input
                
                # Save firt model filename to be used as "fg_file"
                if [ ${#INI_DATE_LIST[@]} -eq 0 ]; then
                    filename=$mod_filename
                fi
    
                # Update arrays 
                ld_time_hhmm=`printf "%%03d" $(( $hh_back * 100 ))`
                INI_DATE_LIST+=($ini_date)
                LEAD_TIME_LIST+=($ld_time_hhmm)
            else
                # No need to check for the same initialization date and time
                break
            fi
        done
    done
fi

# Link model constant fields
echo "Link constant fields and reference atmosphere"
if [[ "$MODEL_NAME" == "icon_2I" ]]; then
    ln -fs $MODEL_STATIC/$MODEL_NAME/ICON-2I_const.grib  ${MEC_WORKDIR}/const
elif [[ "$MODEL_NAME" == "hres" ]]; then
    ln -fs $MODEL_STATIC/$MODEL_NAME/IFS-HRES_const.grib ${MEC_WORKDIR}/const
fi

# Link reference atmosphere ("fg_file" in the namellist). It must be the last forecast file
if [[ $ENS_TOTAL_MEMB -eq 0 ]]; then    
    ln -s  $MODEL_DATADIR/$filename ${MEC_WORKDIR}/input/fg_file
else
    ln -s  ${MODEL_DATADIR}.${mem}/$filename ${MEC_WORKDIR}/input/fg_file
fi

# Link constant file for KENDA
echo "Link constant fields for KENDA"
ln -s ${LETKF_CONST}/ww15mgh.grd ${MEC_WORKDIR}/const/

# Link ICON grid
if [[ "$MODEL_NAME" == "icon_2I" ]]; then
    echo "Link ICON grid"
    ln -s ${LOCALGRID} ${MEC_WORKDIR}/const/
fi

# Create blacklist
touch ${MEC_WORKDIR}/input/blklsttmp

# Create namelist 
if [ $MODEL_STOP -gt 0 ]; then
    export VSTART=-$(( MODEL_STOP * 60 ))      
else
    export VSTART=-$(( VER_FREQ * 60 ))
fi
export LD_TIMES=${LEAD_TIME_LIST[*]}
conf_template namelist_mec
mv namelist_mec run/namelist
chmod 755 run/namelist

# Run MEC
cd $MEC_WORKDIR/run
parcomp_mpirun $EXTRA_MPIRUN $MEC_BIN

# !!! ATTENZIONE!! Per adesso archivio locale
# Save verification files
mkdir -p $ARC_LOC/${DATES}${TIMES}00
rsync -pt $MEC_WORKDIR/output/* $ARC_LOC/${DATES}${TIMES}00
rsync -pt $MEC_WORKDIR/run/YU*  $ARC_LOC/${DATES}${TIMES}00

#if ([[ -n "$CINECA_ARCHIVE_POST" ]] && [[ "%SUITE%" == "icon_2I_enda"* ]]); then
#    subdir=%SUITE%/$DATE$TIME
#    mkdir -p $CINECA_ARCHIVE_POST/$subdir
#    rsync -pt $MEC_WORKDIR/run/YU*  $CINECA_ARCHIVE_POST/$subdir || true
#fi

%include <tail.h>
